// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ERC20PaymentReleased extends ethereum.Event {
  get params(): ERC20PaymentReleased__Params {
    return new ERC20PaymentReleased__Params(this);
  }
}

export class ERC20PaymentReleased__Params {
  _event: ERC20PaymentReleased;

  constructor(event: ERC20PaymentReleased) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogMint extends ethereum.Event {
  get params(): LogMint__Params {
    return new LogMint__Params(this);
  }
}

export class LogMint__Params {
  _event: LogMint;

  constructor(event: LogMint) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get numberMinted(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalMinted(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogPriceUpdated extends ethereum.Event {
  get params(): LogPriceUpdated__Params {
    return new LogPriceUpdated__Params(this);
  }
}

export class LogPriceUpdated__Params {
  _event: LogPriceUpdated;

  constructor(event: LogPriceUpdated) {
    this._event = event;
  }

  get newPrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class PayeeAdded extends ethereum.Event {
  get params(): PayeeAdded__Params {
    return new PayeeAdded__Params(this);
  }
}

export class PayeeAdded__Params {
  _event: PayeeAdded;

  constructor(event: PayeeAdded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PaymentReceived extends ethereum.Event {
  get params(): PaymentReceived__Params {
    return new PaymentReceived__Params(this);
  }
}

export class PaymentReceived__Params {
  _event: PaymentReceived;

  constructor(event: PaymentReceived) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PaymentReleased extends ethereum.Event {
  get params(): PaymentReleased__Params {
    return new PaymentReleased__Params(this);
  }
}

export class PaymentReleased__Params {
  _event: PaymentReleased;

  constructor(event: PaymentReleased) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hashTransaction(
    sender: Address,
    numberOfTokens: BigInt,
    nonce: Bytes
  ): Bytes {
    let result = super.call(
      "hashTransaction",
      "hashTransaction(address,uint256,bytes32):(bytes32)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(numberOfTokens),
        ethereum.Value.fromFixedBytes(nonce)
      ]
    );

    return result[0].toBytes();
  }

  try_hashTransaction(
    sender: Address,
    numberOfTokens: BigInt,
    nonce: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashTransaction",
      "hashTransaction(address,uint256,bytes32):(bytes32)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(numberOfTokens),
        ethereum.Value.fromFixedBytes(nonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  maxBlockPurchase(): BigInt {
    let result = super.call(
      "maxBlockPurchase",
      "maxBlockPurchase():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxBlockPurchase(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxBlockPurchase",
      "maxBlockPurchase():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxWalletPurchase(): BigInt {
    let result = super.call(
      "maxWalletPurchase",
      "maxWalletPurchase():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxWalletPurchase(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxWalletPurchase",
      "maxWalletPurchase():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintSigner(): Address {
    let result = super.call("mintSigner", "mintSigner():(address)", []);

    return result[0].toAddress();
  }

  try_mintSigner(): ethereum.CallResult<Address> {
    let result = super.tryCall("mintSigner", "mintSigner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nonces(param0: Bytes): boolean {
    let result = super.call("nonces", "nonces(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_nonces(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("nonces", "nonces(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  payee(index: BigInt): Address {
    let result = super.call("payee", "payee(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toAddress();
  }

  try_payee(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("payee", "payee(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  price(): BigInt {
    let result = super.call("price", "price():(uint256)", []);

    return result[0].toBigInt();
  }

  try_price(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("price", "price():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  provenance(): Bytes {
    let result = super.call("provenance", "provenance():(bytes32)", []);

    return result[0].toBytes();
  }

  try_provenance(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("provenance", "provenance():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  released(token: Address, account: Address): BigInt {
    let result = super.call("released", "released(address,address):(uint256)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_released(token: Address, account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "released",
      "released(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  released1(account: Address): BigInt {
    let result = super.call("released", "released(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_released1(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("released", "released(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  revealTimestamp(): BigInt {
    let result = super.call(
      "revealTimestamp",
      "revealTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_revealTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "revealTimestamp",
      "revealTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  saleIsActive(): boolean {
    let result = super.call("saleIsActive", "saleIsActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_saleIsActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall("saleIsActive", "saleIsActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  shares(account: Address): BigInt {
    let result = super.call("shares", "shares(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_shares(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("shares", "shares(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signedMintIsActive(): boolean {
    let result = super.call(
      "signedMintIsActive",
      "signedMintIsActive():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_signedMintIsActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "signedMintIsActive",
      "signedMintIsActive():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  startingIndex(): BigInt {
    let result = super.call("startingIndex", "startingIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startingIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startingIndex",
      "startingIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startingIndexBlock(): BigInt {
    let result = super.call(
      "startingIndexBlock",
      "startingIndexBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_startingIndexBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startingIndexBlock",
      "startingIndexBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sweep(token: Address, to: Address, amount: BigInt): boolean {
    let result = super.call("sweep", "sweep(address,address,uint256):(bool)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_sweep(
    token: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "sweep",
      "sweep(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenContract(): Address {
    let result = super.call("tokenContract", "tokenContract():(address)", []);

    return result[0].toAddress();
  }

  try_tokenContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenContract",
      "tokenContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalReleased(token: Address): BigInt {
    let result = super.call(
      "totalReleased",
      "totalReleased(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_totalReleased(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalReleased",
      "totalReleased(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalReleased1(): BigInt {
    let result = super.call("totalReleased", "totalReleased():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalReleased1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalReleased",
      "totalReleased():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalShares(): BigInt {
    let result = super.call("totalShares", "totalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalShares", "totalShares():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get payees(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get shares_(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class FinalizeRevealCall extends ethereum.Call {
  get inputs(): FinalizeRevealCall__Inputs {
    return new FinalizeRevealCall__Inputs(this);
  }

  get outputs(): FinalizeRevealCall__Outputs {
    return new FinalizeRevealCall__Outputs(this);
  }
}

export class FinalizeRevealCall__Inputs {
  _call: FinalizeRevealCall;

  constructor(call: FinalizeRevealCall) {
    this._call = call;
  }
}

export class FinalizeRevealCall__Outputs {
  _call: FinalizeRevealCall;

  constructor(call: FinalizeRevealCall) {
    this._call = call;
  }
}

export class FlipSaleStateCall extends ethereum.Call {
  get inputs(): FlipSaleStateCall__Inputs {
    return new FlipSaleStateCall__Inputs(this);
  }

  get outputs(): FlipSaleStateCall__Outputs {
    return new FlipSaleStateCall__Outputs(this);
  }
}

export class FlipSaleStateCall__Inputs {
  _call: FlipSaleStateCall;

  constructor(call: FlipSaleStateCall) {
    this._call = call;
  }
}

export class FlipSaleStateCall__Outputs {
  _call: FlipSaleStateCall;

  constructor(call: FlipSaleStateCall) {
    this._call = call;
  }
}

export class FlipSignedMintStateCall extends ethereum.Call {
  get inputs(): FlipSignedMintStateCall__Inputs {
    return new FlipSignedMintStateCall__Inputs(this);
  }

  get outputs(): FlipSignedMintStateCall__Outputs {
    return new FlipSignedMintStateCall__Outputs(this);
  }
}

export class FlipSignedMintStateCall__Inputs {
  _call: FlipSignedMintStateCall;

  constructor(call: FlipSignedMintStateCall) {
    this._call = call;
  }
}

export class FlipSignedMintStateCall__Outputs {
  _call: FlipSignedMintStateCall;

  constructor(call: FlipSignedMintStateCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get numberOfTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class ReleaseCall extends ethereum.Call {
  get inputs(): ReleaseCall__Inputs {
    return new ReleaseCall__Inputs(this);
  }

  get outputs(): ReleaseCall__Outputs {
    return new ReleaseCall__Outputs(this);
  }
}

export class ReleaseCall__Inputs {
  _call: ReleaseCall;

  constructor(call: ReleaseCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReleaseCall__Outputs {
  _call: ReleaseCall;

  constructor(call: ReleaseCall) {
    this._call = call;
  }
}

export class Release1Call extends ethereum.Call {
  get inputs(): Release1Call__Inputs {
    return new Release1Call__Inputs(this);
  }

  get outputs(): Release1Call__Outputs {
    return new Release1Call__Outputs(this);
  }
}

export class Release1Call__Inputs {
  _call: Release1Call;

  constructor(call: Release1Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class Release1Call__Outputs {
  _call: Release1Call;

  constructor(call: Release1Call) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class ReserveTokensCall extends ethereum.Call {
  get inputs(): ReserveTokensCall__Inputs {
    return new ReserveTokensCall__Inputs(this);
  }

  get outputs(): ReserveTokensCall__Outputs {
    return new ReserveTokensCall__Outputs(this);
  }
}

export class ReserveTokensCall__Inputs {
  _call: ReserveTokensCall;

  constructor(call: ReserveTokensCall) {
    this._call = call;
  }

  get num(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReserveTokensCall__Outputs {
  _call: ReserveTokensCall;

  constructor(call: ReserveTokensCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetMaxBlockPurchaseCall extends ethereum.Call {
  get inputs(): SetMaxBlockPurchaseCall__Inputs {
    return new SetMaxBlockPurchaseCall__Inputs(this);
  }

  get outputs(): SetMaxBlockPurchaseCall__Outputs {
    return new SetMaxBlockPurchaseCall__Outputs(this);
  }
}

export class SetMaxBlockPurchaseCall__Inputs {
  _call: SetMaxBlockPurchaseCall;

  constructor(call: SetMaxBlockPurchaseCall) {
    this._call = call;
  }

  get newMax(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxBlockPurchaseCall__Outputs {
  _call: SetMaxBlockPurchaseCall;

  constructor(call: SetMaxBlockPurchaseCall) {
    this._call = call;
  }
}

export class SetMaxWalletPurchaseCall extends ethereum.Call {
  get inputs(): SetMaxWalletPurchaseCall__Inputs {
    return new SetMaxWalletPurchaseCall__Inputs(this);
  }

  get outputs(): SetMaxWalletPurchaseCall__Outputs {
    return new SetMaxWalletPurchaseCall__Outputs(this);
  }
}

export class SetMaxWalletPurchaseCall__Inputs {
  _call: SetMaxWalletPurchaseCall;

  constructor(call: SetMaxWalletPurchaseCall) {
    this._call = call;
  }

  get newMax(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxWalletPurchaseCall__Outputs {
  _call: SetMaxWalletPurchaseCall;

  constructor(call: SetMaxWalletPurchaseCall) {
    this._call = call;
  }
}

export class SetMintSignerCall extends ethereum.Call {
  get inputs(): SetMintSignerCall__Inputs {
    return new SetMintSignerCall__Inputs(this);
  }

  get outputs(): SetMintSignerCall__Outputs {
    return new SetMintSignerCall__Outputs(this);
  }
}

export class SetMintSignerCall__Inputs {
  _call: SetMintSignerCall;

  constructor(call: SetMintSignerCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMintSignerCall__Outputs {
  _call: SetMintSignerCall;

  constructor(call: SetMintSignerCall) {
    this._call = call;
  }
}

export class SetPriceCall extends ethereum.Call {
  get inputs(): SetPriceCall__Inputs {
    return new SetPriceCall__Inputs(this);
  }

  get outputs(): SetPriceCall__Outputs {
    return new SetPriceCall__Outputs(this);
  }
}

export class SetPriceCall__Inputs {
  _call: SetPriceCall;

  constructor(call: SetPriceCall) {
    this._call = call;
  }

  get newPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPriceCall__Outputs {
  _call: SetPriceCall;

  constructor(call: SetPriceCall) {
    this._call = call;
  }
}

export class SetProvenanceCall extends ethereum.Call {
  get inputs(): SetProvenanceCall__Inputs {
    return new SetProvenanceCall__Inputs(this);
  }

  get outputs(): SetProvenanceCall__Outputs {
    return new SetProvenanceCall__Outputs(this);
  }
}

export class SetProvenanceCall__Inputs {
  _call: SetProvenanceCall;

  constructor(call: SetProvenanceCall) {
    this._call = call;
  }

  get provenanceHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetProvenanceCall__Outputs {
  _call: SetProvenanceCall;

  constructor(call: SetProvenanceCall) {
    this._call = call;
  }
}

export class SetRevealTimeCall extends ethereum.Call {
  get inputs(): SetRevealTimeCall__Inputs {
    return new SetRevealTimeCall__Inputs(this);
  }

  get outputs(): SetRevealTimeCall__Outputs {
    return new SetRevealTimeCall__Outputs(this);
  }
}

export class SetRevealTimeCall__Inputs {
  _call: SetRevealTimeCall;

  constructor(call: SetRevealTimeCall) {
    this._call = call;
  }

  get timestamp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRevealTimeCall__Outputs {
  _call: SetRevealTimeCall;

  constructor(call: SetRevealTimeCall) {
    this._call = call;
  }
}

export class SignedMintCall extends ethereum.Call {
  get inputs(): SignedMintCall__Inputs {
    return new SignedMintCall__Inputs(this);
  }

  get outputs(): SignedMintCall__Outputs {
    return new SignedMintCall__Outputs(this);
  }
}

export class SignedMintCall__Inputs {
  _call: SignedMintCall;

  constructor(call: SignedMintCall) {
    this._call = call;
  }

  get numberOfTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxPermitted(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get nonce(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SignedMintCall__Outputs {
  _call: SignedMintCall;

  constructor(call: SignedMintCall) {
    this._call = call;
  }
}

export class SweepCall extends ethereum.Call {
  get inputs(): SweepCall__Inputs {
    return new SweepCall__Inputs(this);
  }

  get outputs(): SweepCall__Outputs {
    return new SweepCall__Outputs(this);
  }
}

export class SweepCall__Inputs {
  _call: SweepCall;

  constructor(call: SweepCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SweepCall__Outputs {
  _call: SweepCall;

  constructor(call: SweepCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
